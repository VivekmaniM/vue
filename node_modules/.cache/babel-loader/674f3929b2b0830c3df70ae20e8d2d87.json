{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VTooltip.css\"; // Components\n\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { genericComponent, getUid, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VTooltip = genericComponent()({\n  name: 'VTooltip',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    modelValue: Boolean,\n    text: String,\n    location: {\n      type: String,\n      default: 'end'\n    },\n    origin: {\n      type: String,\n      default: 'auto'\n    },\n    ...makeTransitionProps({\n      transition: false\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const uid = getUid();\n    const id = computed(() => props.id || `v-tooltip-${uid}`);\n    const overlay = ref();\n    const location = computed(() => {\n      return props.location.split(' ').length > 1 ? props.location : props.location + ' center';\n    });\n    const origin = computed(() => {\n      return props.origin === 'auto' || props.origin === 'overlap' || props.origin.split(' ').length > 1 || props.location.split(' ').length > 1 ? props.origin : props.origin + ' center';\n    });\n    const transition = computed(() => {\n      if (props.transition) return props.transition;\n      return isActive.value ? 'scale-transition' : 'fade-transition';\n    });\n    useRender(() => _createVNode(VOverlay, _mergeProps({\n      \"modelValue\": isActive.value,\n      \"onUpdate:modelValue\": $event => isActive.value = $event,\n      \"ref\": overlay,\n      \"class\": ['v-tooltip'],\n      \"id\": id.value,\n      \"transition\": transition.value,\n      \"absolute\": true,\n      \"locationStrategy\": \"connected\",\n      \"scrollStrategy\": \"reposition\",\n      \"location\": location.value,\n      \"origin\": origin.value,\n      \"min-width\": 0,\n      \"offset\": 10,\n      \"scrim\": false,\n      \"persistent\": true,\n      \"open-on-click\": false,\n      \"open-on-hover\": true,\n      \"close-on-back\": false,\n      \"role\": \"tooltip\",\n      \"eager\": true,\n      \"activatorProps\": {\n        'aria-describedby': id.value\n      }\n    }, scopeId, attrs), {\n      activator: slots.activator,\n      default: function () {\n        var _slots$default, _slots$default2;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots, ...args)) != null ? _slots$default : props.text;\n      }\n    }));\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VOverlay","makeTransitionProps","useProxiedModel","useScopeId","forwardRefs","computed","ref","genericComponent","getUid","useRender","VTooltip","name","inheritAttrs","props","id","String","modelValue","Boolean","text","location","type","default","origin","transition","emits","value","setup","attrs","slots","_ref","isActive","scopeId","uid","overlay","split","length","$event","activator","args","arguments","_slots$default2"],"sources":["../../../src/components/VTooltip/VTooltip.tsx"],"sourcesContent":["// Styles\nimport './VTooltip.sass'\n\n// Components\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, getUid, useRender } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\nimport type { PropType } from 'vue'\nimport type { StrategyProps } from '@/components/VOverlay/locationStrategies'\n\nexport const VTooltip = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VTooltip',\n\n  inheritAttrs: false,\n\n  props: {\n    id: String,\n    modelValue: Boolean,\n    text: String,\n\n    location: {\n      type: String as PropType<StrategyProps['location']>,\n      default: 'end',\n    },\n    origin: {\n      type: String as PropType<StrategyProps['origin']>,\n      default: 'auto',\n    },\n\n    ...makeTransitionProps({\n      transition: false,\n    } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-tooltip-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const location = computed(() => {\n      return props.location.split(' ').length > 1\n        ? props.location\n        : props.location + ' center' as StrategyProps['location']\n    })\n\n    const origin = computed(() => {\n      return (\n        props.origin === 'auto' ||\n        props.origin === 'overlap' ||\n        props.origin.split(' ').length > 1 ||\n        props.location.split(' ').length > 1\n      ) ? props.origin\n        : props.origin + ' center' as StrategyProps['origin']\n    })\n\n    const transition = computed(() => {\n      if (props.transition) return props.transition\n      return isActive.value ? 'scale-transition' : 'fade-transition'\n    })\n\n    useRender(() => (\n      <VOverlay\n        v-model={ isActive.value }\n        ref={ overlay }\n        class={[\n          'v-tooltip',\n        ]}\n        id={ id.value }\n        transition={ transition.value }\n        absolute\n        locationStrategy=\"connected\"\n        scrollStrategy=\"reposition\"\n        location={ location.value }\n        origin={ origin.value }\n        min-width={ 0 }\n        offset={ 10 }\n        scrim={ false }\n        persistent\n        open-on-click={ false }\n        open-on-hover\n        close-on-back={ false }\n        role=\"tooltip\"\n        eager\n        activatorProps={{\n          'aria-describedby': id.value,\n        }}\n        { ...scopeId }\n        { ...attrs }\n      >\n        {{\n          activator: slots.activator,\n          default: (...args) => slots.default?.(...args) ?? props.text,\n        }}\n      </VOverlay>\n    ))\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VTooltip = InstanceType<typeof VTooltip>\n"]},"metadata":{},"sourceType":"module"}