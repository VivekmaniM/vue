{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { useToggleScope } from \"./toggleScope.mjs\";\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, ref, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\n\nconst StackSymbol = Symbol.for('vuetify:stack');\nconst globalStack = reactive([]);\nexport function useStack(isActive, zIndex) {\n  const vm = getCurrentInstance('useStack');\n  const parent = inject(StackSymbol, undefined);\n  const stack = reactive({\n    activeChildren: new Set()\n  });\n  provide(StackSymbol, stack);\n\n  const _zIndex = ref(+zIndex.value);\n\n  useToggleScope(isActive, () => {\n    var _globalStack$at;\n\n    const lastZIndex = (_globalStack$at = globalStack.at(-1)) == null ? void 0 : _globalStack$at[1];\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value;\n    globalStack.push([vm.uid, _zIndex.value]);\n    parent == null ? void 0 : parent.activeChildren.add(vm.uid);\n    onScopeDispose(() => {\n      const idx = globalStack.findIndex(v => v[0] === vm.uid);\n      globalStack.splice(idx, 1);\n      parent == null ? void 0 : parent.activeChildren.delete(vm.uid);\n    });\n  });\n  const globalTop = ref(true);\n  watchEffect(() => {\n    var _globalStack$at2;\n\n    const _isTop = ((_globalStack$at2 = globalStack.at(-1)) == null ? void 0 : _globalStack$at2[0]) === vm.uid;\n\n    setTimeout(() => globalTop.value = _isTop);\n  });\n  const localTop = computed(() => !stack.activeChildren.size);\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({\n      zIndex: _zIndex.value\n    }))\n  };\n}","map":{"version":3,"mappings":";;SAASA,sB;AAET,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,cAA3B,EAA2CC,OAA3C,EAAoDC,QAApD,EAA8DC,QAA9D,EAAwEC,GAAxE,EAA6EC,WAA7E,QAAgG,KAAhG;SACSC,0B,qBAET;;AAGA,MAAMC,WAAuC,GAAGC,MAAM,CAACC,GAAPD,CAAW,eAAXA,CAAhD;AAMA,MAAME,WAAW,GAAGR,QAAQ,CAAkC,EAAlC,CAA5B;AAEA,OAAO,SAASS,QAAT,CAAmBC,QAAnB,EAAqDC,MAArD,EAA6F;EAClG,MAAMC,EAAE,GAAGR,kBAAkB,CAAC,UAAD,CAA7B;EAEA,MAAMS,MAAM,GAAGhB,MAAM,CAACQ,WAAD,EAAcS,SAAd,CAArB;EACA,MAAMC,KAAmB,GAAGf,QAAQ,CAAC;IACnCgB,cAAc,EAAE,IAAIC,GAAJ;EADmB,CAAD,CAApC;EAGAlB,OAAO,CAACM,WAAD,EAAcU,KAAd,CAAPhB;;EAEA,MAAMmB,OAAO,GAAGhB,GAAG,CAAC,CAACS,MAAM,CAACQ,KAAT,CAAnB;;EACAxB,cAAc,CAACe,QAAD,EAAW,MAAM;IAAA;;IAC7B,MAAMU,UAAU,sBAAGZ,WAAW,CAACa,EAAZb,CAAe,CAAC,CAAhBA,CAAH,qBAAGc,gBAAqB,CAArB,CAAnB;IACAJ,OAAO,CAACC,KAARD,GAAgBE,UAAU,GAAGA,UAAU,GAAG,EAAhB,GAAqB,CAACT,MAAM,CAACQ,KAAvDD;IACAV,WAAW,CAACe,IAAZf,CAAiB,CAACI,EAAE,CAACY,GAAJ,EAASN,OAAO,CAACC,KAAjB,CAAjBX;IAEAK,MAAM,QAANA,kBAAM,CAAEG,cAARH,CAAuBY,GAAvBZ,CAA2BD,EAAE,CAACY,GAA9BX;IAEAf,cAAc,CAAC,MAAM;MACnB,MAAM4B,GAAG,GAAGlB,WAAW,CAACmB,SAAZnB,CAAsBoB,CAAC,IAAIA,CAAC,CAAC,CAAD,CAADA,KAAShB,EAAE,CAACY,GAAvChB,CAAZ;MACAA,WAAW,CAACqB,MAAZrB,CAAmBkB,GAAnBlB,EAAwB,CAAxBA;MAEAK,MAAM,QAANA,kBAAM,CAAEG,cAARH,CAAuBiB,MAAvBjB,CAA8BD,EAAE,CAACY,GAAjCX;IAJY,EAAdf;EAPY,EAAdH;EAeA,MAAMoC,SAAS,GAAG7B,GAAG,CAAC,IAAD,CAArB;EACAC,WAAW,CAAC,MAAM;IAAA;;IAChB,MAAM6B,MAAM,GAAG,gCAAW,CAACX,EAAZb,CAAe,CAAC,CAAhBA,uCAAqB,CAArB,OAA4BI,EAAE,CAACY,GAA9C;;IACAS,UAAU,CAAC,MAAMF,SAAS,CAACZ,KAAVY,GAAkBC,MAAzB,CAAVC;EAFS,EAAX9B;EAKA,MAAM+B,QAAQ,GAAGtC,QAAQ,CAAC,MAAM,CAACmB,KAAK,CAACC,cAAND,CAAqBoB,IAA7B,CAAzB;EAEA,OAAO;IACLJ,SAAS,EAAE9B,QAAQ,CAAC8B,SAAD,CADd;IAELG,QAFK;IAGLE,WAAW,EAAExC,QAAQ,CAAC,OAAO;MAAEe,MAAM,EAAEO,OAAO,CAACC;IAAlB,CAAP,CAAD;EAHhB,CAAP;AAKD","names":["useToggleScope","computed","inject","onScopeDispose","provide","reactive","readonly","ref","watchEffect","getCurrentInstance","StackSymbol","Symbol","for","globalStack","useStack","isActive","zIndex","vm","parent","undefined","stack","activeChildren","Set","_zIndex","value","lastZIndex","at","_globalStack$at","push","uid","add","idx","findIndex","v","splice","delete","globalTop","_isTop","setTimeout","localTop","size","stackStyles"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { useToggleScope } from '@/composables/toggleScope'\n\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, ref, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\nconst StackSymbol: InjectionKey<StackProvide> = Symbol.for('vuetify:stack')\n\ninterface StackProvide {\n  activeChildren: Set<number>\n}\n\nconst globalStack = reactive<[uid: number, zIndex: number][]>([])\n\nexport function useStack (isActive: Readonly<Ref<boolean>>, zIndex: Readonly<Ref<string | number>>) {\n  const vm = getCurrentInstance('useStack')\n\n  const parent = inject(StackSymbol, undefined)\n  const stack: StackProvide = reactive({\n    activeChildren: new Set<number>(),\n  })\n  provide(StackSymbol, stack)\n\n  const _zIndex = ref(+zIndex.value)\n  useToggleScope(isActive, () => {\n    const lastZIndex = globalStack.at(-1)?.[1]\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value\n    globalStack.push([vm.uid, _zIndex.value])\n\n    parent?.activeChildren.add(vm.uid)\n\n    onScopeDispose(() => {\n      const idx = globalStack.findIndex(v => v[0] === vm.uid)\n      globalStack.splice(idx, 1)\n\n      parent?.activeChildren.delete(vm.uid)\n    })\n  })\n\n  const globalTop = ref(true)\n  watchEffect(() => {\n    const _isTop = globalStack.at(-1)?.[0] === vm.uid\n    setTimeout(() => globalTop.value = _isTop)\n  })\n\n  const localTop = computed(() => !stack.activeChildren.size)\n\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({ zIndex: _zIndex.value })),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}