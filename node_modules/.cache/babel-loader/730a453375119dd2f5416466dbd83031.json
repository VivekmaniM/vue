{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { withDirectives as _withDirectives, createVNode as _createVNode, vShow as _vShow } from \"vue\"; // Directives\n\nimport Touch from \"../../directives/touch/index.mjs\"; // Composables\n\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\";\nimport { MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useSsrBoot } from \"../../composables/ssrBoot.mjs\"; // Utilities\n\nimport { computed, inject, nextTick, ref } from 'vue';\nimport { convertToUnit, defineComponent, useRender } from \"../../util/index.mjs\";\nimport { VWindowGroupSymbol, VWindowSymbol } from \"./VWindow.mjs\";\nexport const VWindowItem = defineComponent({\n  name: 'VWindowItem',\n  directives: {\n    Touch\n  },\n  props: {\n    reverseTransition: {\n      type: [Boolean, String],\n      default: undefined\n    },\n    transition: {\n      type: [Boolean, String],\n      default: undefined\n    },\n    ...makeGroupItemProps(),\n    ...makeLazyProps()\n  },\n  emits: {\n    'group:selected': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const window = inject(VWindowSymbol);\n    const groupItem = useGroupItem(props, VWindowGroupSymbol);\n    const {\n      isBooted\n    } = useSsrBoot();\n    if (!window || !groupItem) throw new Error('[Vuetify] VWindowItem must be used inside VWindow');\n    const isTransitioning = ref(false);\n    const hasTransition = computed(() => window.isReversed.value ? props.reverseTransition !== false : props.transition !== false);\n\n    function onAfterTransition() {\n      if (!isTransitioning.value || !window) {\n        return;\n      } // Finalize transition state.\n\n\n      isTransitioning.value = false;\n\n      if (window.transitionCount.value > 0) {\n        window.transitionCount.value -= 1; // Remove container height if we are out of transition.\n\n        if (window.transitionCount.value === 0) {\n          window.transitionHeight.value = undefined;\n        }\n      }\n    }\n\n    function onBeforeTransition() {\n      if (isTransitioning.value || !window) {\n        return;\n      } // Initialize transition state here.\n\n\n      isTransitioning.value = true;\n\n      if (window.transitionCount.value === 0) {\n        var _window$rootRef$value; // Set initial height for height transition.\n\n\n        window.transitionHeight.value = convertToUnit((_window$rootRef$value = window.rootRef.value) == null ? void 0 : _window$rootRef$value.clientHeight);\n      }\n\n      window.transitionCount.value += 1;\n    }\n\n    function onTransitionCancelled() {\n      onAfterTransition(); // This should have the same path as normal transition end.\n    }\n\n    function onEnterTransition(el) {\n      if (!isTransitioning.value) {\n        return;\n      }\n\n      nextTick(() => {\n        // Do not set height if no transition or cancelled.\n        if (!hasTransition.value || !isTransitioning.value || !window) {\n          return;\n        } // Set transition target height.\n\n\n        window.transitionHeight.value = convertToUnit(el.clientHeight);\n      });\n    }\n\n    const transition = computed(() => {\n      const name = window.isReversed.value ? props.reverseTransition : props.transition;\n      return !hasTransition.value ? false : {\n        name: typeof name !== 'string' ? window.transition.value : name,\n        onBeforeEnter: onBeforeTransition,\n        onAfterEnter: onAfterTransition,\n        onEnterCancelled: onTransitionCancelled,\n        onBeforeLeave: onBeforeTransition,\n        onAfterLeave: onAfterTransition,\n        onLeaveCancelled: onTransitionCancelled,\n        onEnter: onEnterTransition\n      };\n    });\n    const {\n      hasContent\n    } = useLazy(props, groupItem.isSelected);\n    useRender(() => {\n      var _slots$default;\n\n      return _createVNode(MaybeTransition, {\n        \"transition\": isBooted.value && transition.value\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": ['v-window-item', groupItem.selectedClass.value]\n        }, [hasContent.value && ((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots))]), [[_vShow, groupItem.isSelected.value]])]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":";uGAAA;;OACOA,W,oCAEP;;SACSC,oBAAoBC,oB;SACpBC,eAAeC,e;SACfC,uB;SACAC,kB,iCAET;;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,GAArC,QAAgD,KAAhD;SACSC,eAAeC,iBAAiBC,iB;SAChCC,oBAAoBC,qB;AAE7B,OAAO,MAAMC,WAAW,GAAGJ,eAAe,CAAC;EACzCK,IAAI,EAAE,aADmC;EAGzCC,UAAU,EAAE;IACVlB;EADU,CAH6B;EAOzCmB,KAAK,EAAE;IACLC,iBAAiB,EAAE;MACjBC,IAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,CADW;MAEjBC,OAAO,EAAEC;IAFQ,CADd;IAKLC,UAAU,EAAE;MACVL,IAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,CADI;MAEVC,OAAO,EAAEC;IAFC,CALP;IAUL,GAAGxB,kBAAkB,EAVhB;IAWL,GAAGE,aAAa;EAXX,CAPkC;EAqBzCwB,KAAK,EAAE;IACL,kBAAmBC,GAAD,IAA6B;EAD1C,CArBkC;;EAyBzCC,KAAK,CAAEV,KAAF,QAAoB;IAAA,IAAX;MAAEW;IAAF,IAAWC;IACvB,MAAMC,MAAM,GAAGxB,MAAM,CAACO,aAAD,CAArB;IACA,MAAMkB,SAAS,GAAG/B,YAAY,CAACiB,KAAD,EAAQL,kBAAR,CAA9B;IACA,MAAM;MAAEoB;IAAF,IAAe5B,UAAU,EAA/B;IAEA,IAAI,CAAC0B,MAAD,IAAW,CAACC,SAAhB,EAA2B,MAAM,IAAIE,KAAJ,CAAU,mDAAV,CAAN;IAE3B,MAAMC,eAAe,GAAG1B,GAAG,CAAC,KAAD,CAA3B;IACA,MAAM2B,aAAa,GAAG9B,QAAQ,CAAC,MAAMyB,MAAM,CAACM,UAAPN,CAAkBO,KAAlBP,GAA0Bb,KAAK,CAACC,iBAAND,KAA4B,KAAtDa,GAA8Db,KAAK,CAACO,UAANP,KAAqB,KAA1F,CAA9B;;IAEA,SAASqB,iBAAT,GAA8B;MAC5B,IAAI,CAACJ,eAAe,CAACG,KAAjB,IAA0B,CAACP,MAA/B,EAAuC;QACrC;MAF0B,EAK5B;;;MACAI,eAAe,CAACG,KAAhBH,GAAwB,KAAxBA;;MACA,IAAIJ,MAAM,CAACS,eAAPT,CAAuBO,KAAvBP,GAA+B,CAAnC,EAAsC;QACpCA,MAAM,CAACS,eAAPT,CAAuBO,KAAvBP,IAAgC,CAAhCA,CADoC,CAGpC;;QACA,IAAIA,MAAM,CAACS,eAAPT,CAAuBO,KAAvBP,KAAiC,CAArC,EAAwC;UACtCA,MAAM,CAACU,gBAAPV,CAAwBO,KAAxBP,GAAgCP,SAAhCO;QACD;MACF;IACF;;IAED,SAASW,kBAAT,GAA+B;MAC7B,IAAIP,eAAe,CAACG,KAAhBH,IAAyB,CAACJ,MAA9B,EAAsC;QACpC;MAF2B,EAK7B;;;MACAI,eAAe,CAACG,KAAhBH,GAAwB,IAAxBA;;MAEA,IAAIJ,MAAM,CAACS,eAAPT,CAAuBO,KAAvBP,KAAiC,CAArC,EAAwC;QAAA,2BACtC;;;QACAA,MAAM,CAACU,gBAAPV,CAAwBO,KAAxBP,GAAgCrB,aAAa,0BAACqB,MAAM,CAACY,OAAPZ,CAAeO,KAAhB,qBAACM,sBAAsBC,YAAvB,CAA7Cd;MACD;;MAEDA,MAAM,CAACS,eAAPT,CAAuBO,KAAvBP,IAAgC,CAAhCA;IACD;;IAED,SAASe,qBAAT,GAAkC;MAChCP,iBAAiB,GADe,CACZ;IACrB;;IAED,SAASQ,iBAAT,CAA4BC,EAA5B,EAAyC;MACvC,IAAI,CAACb,eAAe,CAACG,KAArB,EAA4B;QAC1B;MACD;;MAED9B,QAAQ,CAAC,MAAM;QACb;QACA,IAAI,CAAC4B,aAAa,CAACE,KAAf,IAAwB,CAACH,eAAe,CAACG,KAAzC,IAAkD,CAACP,MAAvD,EAA+D;UAC7D;QAHW,EAMb;;;QACAA,MAAM,CAACU,gBAAPV,CAAwBO,KAAxBP,GAAgCrB,aAAa,CAACsC,EAAE,CAACH,YAAJ,CAA7Cd;MAPM,EAARvB;IASD;;IAED,MAAMiB,UAAU,GAAGnB,QAAQ,CAAC,MAAM;MAChC,MAAMU,IAAI,GAAGe,MAAM,CAACM,UAAPN,CAAkBO,KAAlBP,GACTb,KAAK,CAACC,iBADGY,GAETb,KAAK,CAACO,UAFV;MAIA,OAAO,CAACW,aAAa,CAACE,KAAf,GAAuB,KAAvB,GAA+B;QACpCtB,IAAI,EAAE,OAAOA,IAAP,KAAgB,QAAhB,GAA2Be,MAAM,CAACN,UAAPM,CAAkBO,KAA7C,GAAqDtB,IADvB;QAEpCiC,aAAa,EAAEP,kBAFqB;QAGpCQ,YAAY,EAAEX,iBAHsB;QAIpCY,gBAAgB,EAAEL,qBAJkB;QAKpCM,aAAa,EAAEV,kBALqB;QAMpCW,YAAY,EAAEd,iBANsB;QAOpCe,gBAAgB,EAAER,qBAPkB;QAQpCS,OAAO,EAAER;MAR2B,CAAtC;IALyB,EAA3B;IAiBA,MAAM;MAAES;IAAF,IAAiBrD,OAAO,CAACe,KAAD,EAAQc,SAAS,CAACyB,UAAlB,CAA9B;IAEA7C,SAAS,CAAC;MAAA;;MAAA;QAAA,cACsBqB,QAAQ,CAACK,KAATL,IAAkBR,UAAU,CAACa;MADnD;QAAAf;UAAA,SAGG,CACL,eADK,EAELS,SAAS,CAAC0B,aAAV1B,CAAwBM,KAFnB;QAHH,IASFkB,UAAU,CAAClB,KAAXkB,uBAAoB3B,KAAK,CAACN,OAA1B,qBAAoBoC,0BAApBH,CATE,cAOKxB,SAAS,CAACyB,UAAVzB,CAAqBM,KAP1B;MAAA;IAAD,EAAT1B;IAcA,OAAO,EAAP;EACD;;AA1HwC,CAAD,CAAnC","names":["Touch","makeGroupItemProps","useGroupItem","makeLazyProps","useLazy","MaybeTransition","useSsrBoot","computed","inject","nextTick","ref","convertToUnit","defineComponent","useRender","VWindowGroupSymbol","VWindowSymbol","VWindowItem","name","directives","props","reverseTransition","type","Boolean","String","default","undefined","transition","emits","val","setup","slots","_ref","window","groupItem","isBooted","Error","isTransitioning","hasTransition","isReversed","value","onAfterTransition","transitionCount","transitionHeight","onBeforeTransition","rootRef","_window$rootRef$value","clientHeight","onTransitionCancelled","onEnterTransition","el","onBeforeEnter","onAfterEnter","onEnterCancelled","onBeforeLeave","onAfterLeave","onLeaveCancelled","onEnter","hasContent","isSelected","selectedClass","_slots$default"],"sources":["../../../src/components/VWindow/VWindowItem.tsx"],"sourcesContent":["// Directives\nimport Touch from '@/directives/touch'\n\n// Composables\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\nimport { MaybeTransition } from '@/composables/transition'\nimport { useSsrBoot } from '@/composables/ssrBoot'\n\n// Utilities\nimport { computed, inject, nextTick, ref } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\nimport { VWindowGroupSymbol, VWindowSymbol } from './VWindow'\n\nexport const VWindowItem = defineComponent({\n  name: 'VWindowItem',\n\n  directives: {\n    Touch,\n  },\n\n  props: {\n    reverseTransition: {\n      type: [Boolean, String],\n      default: undefined,\n    },\n    transition: {\n      type: [Boolean, String],\n      default: undefined,\n    },\n\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const window = inject(VWindowSymbol)\n    const groupItem = useGroupItem(props, VWindowGroupSymbol)\n    const { isBooted } = useSsrBoot()\n\n    if (!window || !groupItem) throw new Error('[Vuetify] VWindowItem must be used inside VWindow')\n\n    const isTransitioning = ref(false)\n    const hasTransition = computed(() => window.isReversed.value ? props.reverseTransition !== false : props.transition !== false)\n\n    function onAfterTransition () {\n      if (!isTransitioning.value || !window) {\n        return\n      }\n\n      // Finalize transition state.\n      isTransitioning.value = false\n      if (window.transitionCount.value > 0) {\n        window.transitionCount.value -= 1\n\n        // Remove container height if we are out of transition.\n        if (window.transitionCount.value === 0) {\n          window.transitionHeight.value = undefined\n        }\n      }\n    }\n\n    function onBeforeTransition () {\n      if (isTransitioning.value || !window) {\n        return\n      }\n\n      // Initialize transition state here.\n      isTransitioning.value = true\n\n      if (window.transitionCount.value === 0) {\n        // Set initial height for height transition.\n        window.transitionHeight.value = convertToUnit(window.rootRef.value?.clientHeight)\n      }\n\n      window.transitionCount.value += 1\n    }\n\n    function onTransitionCancelled () {\n      onAfterTransition() // This should have the same path as normal transition end.\n    }\n\n    function onEnterTransition (el: Element) {\n      if (!isTransitioning.value) {\n        return\n      }\n\n      nextTick(() => {\n        // Do not set height if no transition or cancelled.\n        if (!hasTransition.value || !isTransitioning.value || !window) {\n          return\n        }\n\n        // Set transition target height.\n        window.transitionHeight.value = convertToUnit(el.clientHeight)\n      })\n    }\n\n    const transition = computed(() => {\n      const name = window.isReversed.value\n        ? props.reverseTransition\n        : props.transition\n\n      return !hasTransition.value ? false : {\n        name: typeof name !== 'string' ? window.transition.value : name,\n        onBeforeEnter: onBeforeTransition,\n        onAfterEnter: onAfterTransition,\n        onEnterCancelled: onTransitionCancelled,\n        onBeforeLeave: onBeforeTransition,\n        onAfterLeave: onAfterTransition,\n        onLeaveCancelled: onTransitionCancelled,\n        onEnter: onEnterTransition,\n      }\n    })\n\n    const { hasContent } = useLazy(props, groupItem.isSelected)\n\n    useRender(() => (\n      <MaybeTransition transition={ isBooted.value && transition.value } >\n        <div\n          class={[\n            'v-window-item',\n            groupItem.selectedClass.value,\n          ]}\n          v-show={ groupItem.isSelected.value }\n        >\n          { hasContent.value && slots.default?.() }\n        </div>\n      </MaybeTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VWindowItem = InstanceType<typeof VWindowItem>\n"]},"metadata":{},"sourceType":"module"}