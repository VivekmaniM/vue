{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSnackbar.css\"; // Components\n\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { onMounted, ref, watch } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nexport const VSnackbar = defineComponent({\n  name: 'VSnackbar',\n  props: {\n    contentClass: {\n      type: String,\n      default: ''\n    },\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000\n    },\n    vertical: Boolean,\n    modelValue: Boolean,\n    ...makeLocationProps({\n      location: 'bottom'\n    }),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeTransitionProps({\n      transition: 'v-snackbar-transition'\n    })\n  },\n  emits: {\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const overlay = ref();\n    watch(isActive, startTimeout);\n    watch(() => props.timeout, startTimeout);\n    onMounted(() => {\n      if (isActive.value) startTimeout();\n    });\n    let activeTimeout = -1;\n\n    function startTimeout() {\n      window.clearTimeout(activeTimeout);\n      const timeout = Number(props.timeout);\n      if (!isActive.value || timeout === -1) return;\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false;\n      }, timeout);\n    }\n\n    function onPointerenter() {\n      window.clearTimeout(activeTimeout);\n    }\n\n    useRender(() => _createVNode(VOverlay, _mergeProps({\n      \"modelValue\": isActive.value,\n      \"onUpdate:modelValue\": $event => isActive.value = $event,\n      \"ref\": overlay,\n      \"class\": ['v-snackbar', {\n        'v-snackbar--active': isActive.value,\n        'v-snackbar--multi-line': props.multiLine && !props.vertical,\n        'v-snackbar--vertical': props.vertical\n      }, positionClasses.value],\n      \"style\": [colorStyles.value],\n      \"contentProps\": {\n        style: locationStyles.value\n      },\n      \"contentClass\": props.contentClass,\n      \"persistent\": true,\n      \"noClickAnimation\": true,\n      \"scrim\": false,\n      \"scrollStrategy\": \"none\",\n      \"transition\": props.transition\n    }, scopeId), {\n      default: () => [_createVNode(\"div\", {\n        \"class\": ['v-snackbar__wrapper', colorClasses.value, roundedClasses.value, variantClasses.value],\n        \"onPointerenter\": onPointerenter,\n        \"onPointerleave\": startTimeout\n      }, [genOverlays(false, 'v-snackbar'), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-snackbar__content\",\n        \"role\": \"status\",\n        \"aria-live\": \"polite\"\n      }, [slots.default()]), slots.actions && _createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VBtn: {\n            variant: 'text',\n            ripple: false\n          }\n        }\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": \"v-snackbar__actions\"\n        }, [slots.actions()])]\n      })])],\n      activator: slots.activator\n    }));\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDefaultsProvider","VOverlay","genOverlays","makeVariantProps","useVariant","makeLocationProps","useLocation","makePositionProps","usePosition","makeRoundedProps","useRounded","makeTransitionProps","useProxiedModel","useScopeId","forwardRefs","onMounted","ref","watch","defineComponent","useRender","VSnackbar","name","props","contentClass","type","String","default","multiLine","Boolean","timeout","Number","vertical","modelValue","location","transition","emits","v","setup","slots","_ref","isActive","locationStyles","positionClasses","scopeId","colorClasses","colorStyles","variantClasses","roundedClasses","overlay","startTimeout","value","activeTimeout","window","clearTimeout","setTimeout","onPointerenter","$event","style","actions","VBtn","variant","ripple","activator"],"sources":["../../../src/components/VSnackbar/VSnackbar.tsx"],"sourcesContent":["// Styles\nimport './VSnackbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { onMounted, ref, watch } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VSnackbar = defineComponent({\n  name: 'VSnackbar',\n\n  props: {\n    contentClass: {\n      type: String,\n      default: '',\n    },\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000,\n    },\n    vertical: Boolean,\n\n    modelValue: Boolean,\n\n    ...makeLocationProps({ location: 'bottom' } as const),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeTransitionProps({ transition: 'v-snackbar-transition' }),\n  },\n\n  emits: {\n    'update:modelValue': (v: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { scopeId } = useScopeId()\n\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { roundedClasses } = useRounded(props)\n\n    const overlay = ref<VOverlay>()\n\n    watch(isActive, startTimeout)\n    watch(() => props.timeout, startTimeout)\n\n    onMounted(() => {\n      if (isActive.value) startTimeout()\n    })\n\n    let activeTimeout = -1\n    function startTimeout () {\n      window.clearTimeout(activeTimeout)\n      const timeout = Number(props.timeout)\n\n      if (!isActive.value || timeout === -1) return\n\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false\n      }, timeout)\n    }\n\n    function onPointerenter () {\n      window.clearTimeout(activeTimeout)\n    }\n\n    useRender(() => (\n      <VOverlay\n        v-model={ isActive.value }\n        ref={ overlay }\n        class={[\n          'v-snackbar',\n          {\n            'v-snackbar--active': isActive.value,\n            'v-snackbar--multi-line': props.multiLine && !props.vertical,\n            'v-snackbar--vertical': props.vertical,\n          },\n          positionClasses.value,\n        ]}\n        style={[colorStyles.value]}\n        contentProps={{\n          style: locationStyles.value,\n        }}\n        contentClass={ props.contentClass }\n        persistent\n        noClickAnimation\n        scrim={ false }\n        scrollStrategy=\"none\"\n        transition={ props.transition }\n        { ...scopeId }\n        v-slots={{ activator: slots.activator }}\n      >\n        <div\n          class={[\n            'v-snackbar__wrapper',\n            colorClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n          ]}\n          onPointerenter={ onPointerenter }\n          onPointerleave={ startTimeout }\n        >\n          { genOverlays(false, 'v-snackbar') }\n\n          { slots.default && (\n            <div\n              class=\"v-snackbar__content\"\n              role=\"status\"\n              aria-live=\"polite\"\n            >\n              { slots.default() }\n            </div>\n          ) }\n\n          { slots.actions && (\n            <VDefaultsProvider\n              defaults={{\n                VBtn: {\n                  variant: 'text',\n                  ripple: false,\n                },\n              }}\n            >\n              <div class=\"v-snackbar__actions\">\n                { slots.actions() }\n              </div>\n            </VDefaultsProvider>\n          ) }\n        </div>\n      </VOverlay>\n    ))\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VSnackbar = InstanceType<typeof VSnackbar>\n"]},"metadata":{},"sourceType":"module"}