{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VRadioGroup.css\"; // Components\n\nimport { filterControlProps, makeSelectionControlProps } from \"../VSelectionControl/VSelectionControl.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { VSelectionControlGroup } from \"../VSelectionControlGroup/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, filterInputAttrs, getUid, useRender } from \"../../util/index.mjs\";\nexport const VRadioGroup = defineComponent({\n  name: 'VRadioGroup',\n  inheritAttrs: false,\n  props: {\n    height: {\n      type: [Number, String],\n      default: 'auto'\n    },\n    ...makeVInputProps(),\n    ...makeSelectionControlProps(),\n    trueIcon: {\n      type: IconValue,\n      default: '$radioOn'\n    },\n    falseIcon: {\n      type: IconValue,\n      default: '$radioOff'\n    },\n    type: {\n      type: String,\n      default: 'radio'\n    }\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const uid = getUid();\n    const id = computed(() => props.id || `radio-group-${uid}`);\n    const model = useProxiedModel(props, 'modelValue');\n    provideDefaults({\n      VRadio: {\n        color: toRef(props, 'color'),\n        density: toRef(props, 'density')\n      }\n    });\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const [inputProps, _1] = filterInputProps(props);\n      const [controlProps, _2] = filterControlProps(props);\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      return _createVNode(VInput, _mergeProps({\n        \"class\": \"v-radio-group\"\n      }, inputAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"id\": id.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isReadonly\n          } = _ref2;\n          return _createVNode(_Fragment, null, [label && _createVNode(VLabel, {\n            \"for\": id.value\n          }, {\n            default: () => [label]\n          }), _createVNode(VSelectionControlGroup, _mergeProps(controlProps, {\n            \"id\": id.value,\n            \"trueIcon\": props.trueIcon,\n            \"falseIcon\": props.falseIcon,\n            \"type\": props.type,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value\n          }, controlAttrs, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": $event => model.value = $event\n          }), slots)]);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterControlProps","makeSelectionControlProps","filterInputProps","makeVInputProps","VInput","VLabel","VSelectionControlGroup","IconValue","provideDefaults","useProxiedModel","computed","toRef","defineComponent","filterInputAttrs","getUid","useRender","VRadioGroup","name","inheritAttrs","props","height","type","Number","String","default","trueIcon","falseIcon","emits","val","setup","attrs","slots","_ref","uid","id","model","VRadio","color","density","inputAttrs","controlAttrs","inputProps","_1","controlProps","_2","label","for","value","$event","_ref2","isDisabled","isReadonly"],"sources":["../../../src/components/VRadioGroup/VRadioGroup.tsx"],"sourcesContent":["// Styles\nimport './VRadioGroup.sass'\n\n// Components\nimport { filterControlProps, makeSelectionControlProps } from '@/components/VSelectionControl/VSelectionControl'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\nimport { VSelectionControlGroup } from '@/components/VSelectionControlGroup'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, filterInputAttrs, getUid, useRender } from '@/util'\n\nexport const VRadioGroup = defineComponent({\n  name: 'VRadioGroup',\n\n  inheritAttrs: false,\n\n  props: {\n    height: {\n      type: [Number, String],\n      default: 'auto',\n    },\n\n    ...makeVInputProps(),\n    ...makeSelectionControlProps(),\n\n    trueIcon: {\n      type: IconValue,\n      default: '$radioOn',\n    },\n    falseIcon: {\n      type: IconValue,\n      default: '$radioOff',\n    },\n    type: {\n      type: String,\n      default: 'radio',\n    },\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const uid = getUid()\n    const id = computed(() => props.id || `radio-group-${uid}`)\n    const model = useProxiedModel(props, 'modelValue')\n\n    provideDefaults({\n      VRadio: {\n        color: toRef(props, 'color'),\n        density: toRef(props, 'density'),\n      },\n    })\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = filterInputProps(props)\n      const [controlProps, _2] = filterControlProps(props)\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n\n      return (\n        <VInput\n          class=\"v-radio-group\"\n          { ...inputAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <>\n                { label && (\n                  <VLabel for={ id.value }>\n                    { label }\n                  </VLabel>\n                ) }\n\n                <VSelectionControlGroup\n                  { ...controlProps }\n                  id={ id.value }\n                  trueIcon={ props.trueIcon }\n                  falseIcon={ props.falseIcon }\n                  type={ props.type }\n                  disabled={ isDisabled.value }\n                  readonly={ isReadonly.value }\n                  { ...controlAttrs }\n                  v-model={ model.value }\n                  v-slots={ slots }\n                />\n              </>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n"]},"metadata":{},"sourceType":"module"}