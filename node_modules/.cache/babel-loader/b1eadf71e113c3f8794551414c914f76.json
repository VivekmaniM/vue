{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VDialog.css\"; // Components\n\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { nextTick, ref, watch } from 'vue';\nimport { genericComponent, IN_BROWSER, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VDialog = genericComponent()({\n  name: 'VDialog',\n  inheritAttrs: false,\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center'\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n    ...makeDimensionProps({\n      width: 'auto'\n    }),\n    ...makeTransitionProps({\n      transition: {\n        component: VDialogTransition\n      }\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const overlay = ref();\n\n    function onFocusin(e) {\n      var _overlay$value, _overlay$value2;\n\n      const before = e.relatedTarget;\n      const after = e.target;\n\n      if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.contentEl && // We're the topmost dialog\n      (_overlay$value2 = overlay.value) != null && _overlay$value2.globalTop && // It isn't the document or the dialog body\n      ![document, overlay.value.contentEl].includes(after) && // It isn't inside the dialog body\n      !overlay.value.contentEl.contains(after)) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')].filter(el => !el.hasAttribute('disabled'));\n        if (!focusable.length) return;\n        const firstElement = focusable[0];\n        const lastElement = focusable[focusable.length - 1];\n\n        if (before === firstElement) {\n          lastElement.focus();\n        } else {\n          firstElement.focus();\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);\n      }, {\n        immediate: true\n      });\n    }\n\n    watch(isActive, async val => {\n      await nextTick();\n\n      if (val) {\n        var _contentEl;\n\n        (_contentEl = overlay.value.contentEl) == null ? void 0 : _contentEl.focus({\n          preventScroll: true\n        });\n      } else {\n        var _activatorEl;\n\n        (_activatorEl = overlay.value.activatorEl) == null ? void 0 : _activatorEl.focus({\n          preventScroll: true\n        });\n      }\n    });\n    useRender(() => _createVNode(VOverlay, _mergeProps({\n      \"modelValue\": isActive.value,\n      \"onUpdate:modelValue\": $event => isActive.value = $event,\n      \"class\": ['v-dialog', {\n        'v-dialog--fullscreen': props.fullscreen,\n        'v-dialog--scrollable': props.scrollable\n      }],\n      \"style\": dimensionStyles.value,\n      \"transition\": props.transition,\n      \"ref\": overlay,\n      \"aria-role\": \"dialog\",\n      \"aria-modal\": \"true\",\n      \"activatorProps\": {\n        'aria-haspopup': 'dialog',\n        'aria-expanded': String(isActive.value)\n      },\n      \"z-index\": 2400\n    }, scopeId, attrs), {\n      default: slots.default,\n      activator: slots.activator\n    }));\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDialogTransition","VOverlay","makeDimensionProps","useDimension","makeTransitionProps","useProxiedModel","useScopeId","forwardRefs","nextTick","ref","watch","genericComponent","IN_BROWSER","useRender","VDialog","name","inheritAttrs","props","fullscreen","Boolean","origin","type","String","default","retainFocus","scrollable","modelValue","width","transition","component","emits","value","setup","attrs","slots","_ref","isActive","dimensionStyles","scopeId","overlay","onFocusin","e","before","relatedTarget","after","target","_overlay$value","contentEl","_overlay$value2","globalTop","document","includes","contains","focusable","querySelectorAll","filter","el","hasAttribute","length","firstElement","lastElement","focus","val","addEventListener","removeEventListener","immediate","preventScroll","activatorEl","$event","activator"],"sources":["../../../src/components/VDialog/VDialog.tsx"],"sourcesContent":["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { nextTick, ref, watch } from 'vue'\nimport { genericComponent, IN_BROWSER, useRender } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VDialog = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VDialog',\n\n  inheritAttrs: false,\n\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n\n    ...makeDimensionProps({ width: 'auto' }),\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { dimensionStyles } = useDimension(props)\n    const { scopeId } = useScopeId()\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost dialog\n        overlay.value?.globalTop &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    watch(isActive, async val => {\n      await nextTick()\n      if (val) {\n        overlay.value!.contentEl?.focus({ preventScroll: true })\n      } else {\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    useRender(() => (\n      <VOverlay\n        v-model={ isActive.value }\n        class={[\n          'v-dialog',\n          {\n            'v-dialog--fullscreen': props.fullscreen,\n            'v-dialog--scrollable': props.scrollable,\n          },\n        ]}\n        style={ dimensionStyles.value }\n        transition={ props.transition }\n        ref={ overlay }\n        aria-role=\"dialog\"\n        aria-modal=\"true\"\n        activatorProps={{\n          'aria-haspopup': 'dialog',\n          'aria-expanded': String(isActive.value),\n        }}\n        z-index={ 2400 }\n        { ...scopeId }\n        { ...attrs }\n        v-slots={{\n          default: slots.default,\n          activator: slots.activator,\n        }}\n      />\n    ))\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"]},"metadata":{},"sourceType":"module"}